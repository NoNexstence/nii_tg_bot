import os

from telegram import InputFile
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CallbackQueryHandler, CommandHandler,
                          MessageHandler, filters, ConversationHandler, ContextTypes)

from sql import load_data
from document import create_doc


BOT_TOKEN = '8252550919:AAEiIn_d8JiAcfS_478erwoBjnkVorBWnyg'
YEAR, REGION, TYPE = range(3)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã **–î–æ–±—Ä—ã–π –¥–µ–Ω—å!**\n\n"
        "–Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–ø—Ä–∞–≤–æ–∫\n",

        parse_mode="Markdown"
    )

    keyboard = [["üîç –ü–æ–∏—Å–∫"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    await update.message.reply_text(
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫:",
        reply_markup=reply_markup
    )

    return ConversationHandler.END


# ====================/ –ù–ê–ß–ê–¢–¨ –ü–û–ò–°–ö /==================== #
async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîç –ü–æ–∏—Å–∫":
        keyboard = [
            [InlineKeyboardButton("2020", callback_data="year_2020")],
            [InlineKeyboardButton("2021", callback_data="year_2021")],
            [InlineKeyboardButton("2022", callback_data="year_2022")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üîç **–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫!**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return YEAR
    return ConversationHandler.END


# ====================/ –ñ–î–ï–ú –ö–û–õ–ë–≠–ö –° –ì–û–î–û–ú /==================== #
async def handle_year_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("year_"):
        year = query.data[len("year_"):]
        context.user_data['year'] = year

        keyboard = [
            [InlineKeyboardButton("2290", callback_data="region_2290")],
            [InlineKeyboardButton("2336", callback_data="region_2336")],
            [InlineKeyboardButton("8150", callback_data="region_8150")],
            [InlineKeyboardButton("8250", callback_data="region_8250")],
            [InlineKeyboardButton("8950", callback_data="region_8950")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥: {year}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

        return REGION
    return YEAR


# ====================/ –ñ–î–ï–ú –ö–û–õ–ë–≠–ö –° –†–ï–ì–ò–û–ù–û–ú /==================== #
async def handle_region_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("region_"):
        region = query.data[len("region_"):]
        context.user_data['region'] = region
        year = context.user_data.get("year")

        keyboard = [
            [InlineKeyboardButton("–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏", callback_data="type_mo_–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏")],
            [InlineKeyboardButton("–î–µ—Ç—Å–∫–∏–µ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏", callback_data="type_mo_–î–µ—Ç—Å–∫–∏–µ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏")],
            [InlineKeyboardButton("–ê–º–±—É–ª–∞—Ç–æ—Ä–∏–∏", callback_data="type_mo_–ê–º–±—É–ª–∞—Ç–æ—Ä–∏–∏")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥: {year}\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω: {region}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –ú–û:",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )

        return TYPE
    return REGION


# ====================/ –ñ–î–ï–ú –ö–û–õ–ë–≠–ö –° –¢–ò–ü–û–ú –ú–û /==================== #
async def handle_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("type_mo_"):
        type_mo = query.data[len("type_mo_"):]
        context.user_data['type_mo'] = type_mo
        year = context.user_data.get("year")
        region = context.user_data.get("region")



        await query.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥: {year}\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω: {region}\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ú–û: {type_mo}\n\n"
            "–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ, –æ–∂–∏–¥–∞–π—Ç–µ ...",
            parse_mode="Markdown",
        )
        data = load_data(year, region, type_mo)
        create_doc(data)

        file_path = "files/final_result.docx"

        if os.path.exists(file_path):
            with open(file_path, 'rb') as file:
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=InputFile(file, filename=f"–æ—Ç—á–µ—Ç_{year}_{region}.docx"),
                    caption="‚úÖ –°–ø—Ä–∞–≤–∫–∞ –≥–æ—Ç–æ–≤–∞!"
                )


        else:
            await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

        return ConversationHandler.END
    return TYPE



def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text("üîç –ü–æ–∏—Å–∫"), start_search)],
        states={
            YEAR: [CallbackQueryHandler(handle_year_selection, pattern="^year_")],
            REGION: [CallbackQueryHandler(handle_region_selection, pattern="^region_")],
            TYPE: [CallbackQueryHandler(handle_type_selection, pattern="^type_")]
        },
        fallbacks=[
            CommandHandler("start", start),
            MessageHandler(filters.Text("üîç –ü–æ–∏—Å–∫"), start_search)
        ]
    )

    app.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()